// https://codepen.io/bluesaunders/details/FCLaz
$dark-text-default: #000 !default;
$light-text-default: #fff !default;

// For loop inumerator
$num: 0;

// Calculeate brightness of a given color.
@function brightness($color) {
	@return ((red($color) * .299) + (green($color) * .587) + (blue($color) * .114)) / 255 * 100%;
}

// Compares contrast of a given color to the light/dark arguments and returns whichever is most "contrasty"
@function color-contrast($color, $dark: $dark-text-default, $light: $light-text-default) {
	@if $color == null {
		@return null;
	}
	@else {
		$color-brightness: brightness($color);
		$light-text-brightness: brightness($light);
		$dark-text-brightness: brightness($dark);

		@return if(abs($color-brightness - $light-text-brightness) > abs($color-brightness - $dark-text-brightness), $light, $dark);
	}
}

@function css-hsl($hsl){
	@return unquote("hsl(#{$hsl})");
}

@function css-hsla($hsla){
	@return unquote("hsla(#{$hsla})");
}

// https://www.w3schools.com/colors/colors_converter.asp
@function rgb2HslList($r, $g, $b) {
	$rgb: ($r / 255) ($g / 255) ($b / 255);
	$min: nth($rgb, 1);
	$max: nth($rgb, 1);
	$max-color-index: 1;

	@for $i from 1 through length($rgb) - 1 {
		@if (nth($rgb, $i + 1) <= $min) {
			$min: nth($rgb, $i + 1);
		}
		@if (nth($rgb, $i + 1) >= $max) {
			$max: nth($rgb, $i + 1);
			$max-color-index: $i + 1;
		}
	}

	$h: $max - $min;
	@if ($h <= 0) {
		$h: 0;
	} @else if ($max-color-index == 1) {
		$h: (nth($rgb, 2) - nth($rgb, 3)) / $h;
	} @else if ($max-color-index == 2) {
		$h: 2 + (nth($rgb, 3) - nth($rgb, 1)) / $h;
	} @else if ($max-color-index == 3) {
		$h: 4 + (nth($rgb, 1) - nth($rgb, 2)) / $h;
	}
	$h: $h * 60;
	@if ($h < 0) {
		$h: $h + 360;
	}

	$l: ($min + $max) / 2;

	$s: 0;
	@if ($min == $max) {
		$s: 0;
	} @else {
		@if ($l < 0.5) {
			$s: ($max - $min) / ($max + $min);
		} @else {
			$s: ($max - $min) / (2 - $max - $min);
		}
	}

	@return $h ($s * 100%) ($l * 100%);
}
